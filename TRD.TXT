Contents
1. General
	1.1 Перед отправкой
	1.2 Стандартные идеи
	1.3 Troubleshoot
	1.4 Template
	1.5 Debug compilation
	1.6 Random
	1.7 Built-in GCC Stuff
	1.8 __int128
	1.9 PBDS: Ordered set
	1.10 Fast input-output
	1.11 Stress-testing
2. Graphs
	2.1 Finding bridges
	2.2 Finding cutpoints
	2.3 LCA (sparse table)
	2.4 MST: Prim's algorithm
	2.5 Kuhn's algorithm
	2.6 Eulerian path
	2.7 Floyd-Warshall algorithm
	2.8 2-SAT
3. Flows
	3.1 Maxflow: Dinic's algorithm
	3.2 Minimal cut
	3.3 Mincost flow
4. Math
	4.1 Modulo arithmetics
	4.2 Euler's function
	4.3 FFT (modulo/complex)
	4.4 Linear Sieve
	4.5 Game theory
	4.6 Diofant
	4.7 Burnside lemma
	4.8 Catalan numbers
	4.9 Stirling numbers
	4.10 Formulas++
	4.11 Pythagorean triples
	4.12 Fibonacci numbers
5. Data Structures
	5.1 DSU
	5.2 Fenwick tree
	5.3 2D Fenwick tree
	5.4 Segment tree
6. Geometry
	6.0 Geometry functions
	6.1 Convex hull
	6.2 Geometry template
7. Strings
	7.1 String hashing
	7.2 Z-function
	7.3 Prefix function
	7.4 Trie

------------------------------------------------

1. General

1.1 Перед отправкой

Проверить КАЖДУЮ переменную и ПРОМЕЖУТОЧНЫЕ вычисления на переполнение
Протестить мультитест!!
Правильное считывание данных! 
	Freopen!!!
	Ввод в правильной последовательности, такие, как в условии
	Ввод ВСЕХ данных, без пропуска break, continue
Правильный вывод! 
	Убрать cerr
	Что нужно вместо endl, в мультитесте перенос!!
	Все выводы СКОПИРОВАНЫ из условия, в нужном регистре!!
Проверить МИН, МАКС, РАНДОМНЫЙ тесты!
Правильно ли заифаны крайние тесты!!!
Дефайны + проверить точность
Resize + push_back нельзя!!
При полном непонимании перечитать условие, подчеркнуть важное, сравнить +-1, проверить семплы, там часто скрыто простое альтернативное решение.

------------------------

1.2 Стандартные идеи

Перебор, бинарный поиск (бинпоиск по ответу), тернарный поиск, жадники
Динамика (дерево, маскам, n-мерная, профилю (изломанному), по цифрам, матрица)
	Подсчет каких-либо комбинаторных объектов - это почти всегда ДП
	Как и генерация объекта по номеру и номера по объекту
	Динамика по подстрокам: есть массив из n элементов, надо что-то вычислить для него, если сделать один шаг, то перейдем к некоторому подмассиву
	Динамика по подмножествам: пусть мы ищем гамильтонов путь в графе (который проходит через все вершины ровно по разу). Тогда на очередном шаге мы в какой-то вершине и некоторые вершины уже посещены
	Оптимизации динамики: Кнут, разделяй и властвуй, Ли Чао
Хеши, z-function, Ахо-Корасик, автомат, БОР
Дерево отрезков, фенвик, декартово, корнячка, разделяйка, сканирующая прямая
2-SAT, Эйлеров обход. Если в задаче просят разбить элементы на два множества как-нибудь - подумайте в сторону 2-SAT. Если при этом нужно минимизировать стоимость - подумайте в сторону минката
Если привести к одному виду, то делать паралельно
Рандом шафл, рандомный вес, FFT, МО
Принцип включения-исключения, метод двух указателей, Meet-in-the-middle
Потоки (венгерка, mincos-maxflow), Кун
	Если в задаче достаточно маленькие ограничения, и вам кажется, что она похожа на какую-то ДПшку, но при этом уже час все ваши дпшки рушатся - попробуйте свести к потоку или минкосту
Мин макс метрики
Справа пририсовывывыаешь единичную и пускаешь Гаусса, чтобы слева была единичная
Очередь на стеках с любой (без обратных операций)
Сжать граф
Что-то делать с простыми - их не так много, запомнить разложения и с ними что-то сделать

Инварианты
Бить задачу на подзадачи
Выделять интересные факты (все что можно)
Прокручивать в голове ход мыслей, использовать факты о задаче
Доверяй, но проверяй

Выделить виды тестов => особенные виды ввода и вывода?

------------------------

1.3 Troubleshoot

Неправильный ответ:
	Посмотреть, что выводится в решении. Сделать отладочный вывод
	Проверить, что после каждого теста обнуляются переменные, освобождается память
	Обрабатываются ли все вводимые данные?
	Перечитать задачу целиком
	Правильно ли обрабываются крайние случаи?
	Точно ли вы правильно понимаете задачу?
	Неинициализированные переменные?
	Переполнения?
	Не нужен ли multiset вместо set?
	Не перепутаны ли N и M, i и j, и т.д.?
	Точно ли алгоритм работает верно?
	Может быть, в задаче есть особые случаи?
	Точно ли стандартные функции, которые вы используете, делают то, что вы думаете?
	Подобавлять assert, перепослать
	Придумать еще тестов, прогнать решение на них
	Посмотреть работу алгоритма построчно для простого теста
	Сделать всё вышеперечисленное еще раз
	Объяснить свое решение сокоманднику
	Попросить сокомандника посмотреть код
	Пойти прогуляться, например, выйти в туалет
	Проверить формат вывода (пробелы, переводы строк)
	Перепишите решение с нуля или заставьте сокомандника это сделать

Ошибка исполнения:
	Запустите решение локально на всех крайних случаях.
	Неинициализированные переменные?
	Выход за границы массива при чтении или записи?
	Неправильные assert?
	Деление или взятие остатка от деления на 0?
	Возможна ли бесконечная рекурсия?
	Некорректные указатели или итераторы?
	Точно ли нигде не используется слишком много памяти?

Превышено ограничение по времени:
	Заменить endl на \n
	Возможны ли бесконечные циклы?
	Оценить сложность алгоритма
	Слишком много копирований?
	Переписать с vector на массив, с map на unordered_map
	Что про твой алгоритм думают сокомандники?

Превышено ограничение по памяти:
	Оценить максимальный размер памяти, который может понадобиться программе
	Очищается ли память после каждого теста?

------------------------

1.4 Template

#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt")

#include <bits/stdc++.h>

using namespace std;
using ull = unsigned long long;
using ll  = long long;
using ld = long double;
#define pb push_back
#define fi first 
#define se second
#define vi vector<int> 
#define vl vector<ll> 
#define vvi vector<vi> 
#define vvl vector<vl> 
#define pii pair<int,int>
#define pll pair<ll, ll>
#define vii vector<pii> 
#define vll vector<pll> 
#define vvii vector<vii>
#define vvll vector<vll>
#define all(x) begin(x), end(x)
#define sz(x) (int)x.size()

#ifndef LOCAL
#define cerr if (0) cerr
#endif

template <typename T, typename V> ostream &operator<<(ostream &out, pair<T, V> p) {
	out << "(" << p.fi << ", " << p.se << ")";
	return out;
}

template <typename T> ostream &operator<<(ostream &out, vector<T> v) {
	out << "[";
	for (T e : v)
		out << e << ", ";
	out << "]";
	return out;
}

template <typename T> ostream &operator<<(ostream &out, vector<vector<T>> v) {
	out << "[";
	for (auto e : v)
		out << e << ",\n";
	out << "]";
	return out;
}

template <typename T, typename C> ostream &operator<<(ostream &out, set<T, C> s) {
	out << "{";
	for (T e : s)
		out << e << ", ";
	out << "}";
	return out;
}

template <typename T, typename V, typename C> ostream &operator<<(ostream &out, map<T, V, C> m) {
	out << "{";
	for (auto e : m)
		out << e << ", ";
	out << "}";
	return out;
}

void solve() {

}

int32_t main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	// freopen("in.txt", "r", stdin);
	// freopen("out.txt", "w", stdout);

	// cout << fixed << setprecision(10);

	int t = 1;
	// cin >> t;

	while (t --> 0) {
		solve();
	}

	return 0;
}

------------------------

1.5 Debug compilation

g++ -DLOCAL -Wall -Wextra -pedantic -std=c++17 -O2 -Wshadow -Wformat=2 -Wfloat-equal -Wconversion -Wlogical-op -Wshift-overflow=2 -Wduplicated-cond -Wcast-qual -Wcast-align -D_GLIBCXX_DEBUG -D_GLIBCXX_DEBUG_PEDANTIC -D_FORTIFY_SOURCE=2 -fstack-protector a.cpp -o a

------------------------

1.6 Random

mt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());
mt19937_64 rnd(chrono::steady_clock::now().time_since_epoch().count());

------------------------

1.7 Built-in GCC Stuff

__builtin_clz(x): the number of zeros at the beginning of the bit representation
__builtin_ctz(x): the number of zeros at the end of the bit representation
__builtin_popcount(x): the number of ones in the bit representation
__builtin_parity(x): the parity of the number of ones in the bit representation

------------------------

1.8 __int128

__int128 read() {
	__int128 x = 0, f = 1;
	char ch = getchar();
	while (ch < '0' || ch > '9') {
		if (ch == '-') f = -1;
		ch = getchar();
	}
	while (ch >= '0' && ch <= '9') {
		x = x * 10 + ch - '0';
		ch = getchar();
	}
	return x * f;
}

void print(__int128 x) {
	if (x < 0) {
		putchar('-');
		x = -x;
	}
	if (x > 9) print(x / 10);
	putchar(x % 10 + '0');
}

bool cmp(__int128 x, __int128 y) { return x > y; }

------------------------

1.9 PBDS: Ordered set

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;

// Example

ordered_set X;
X.insert(1);
X.insert(2);
X.insert(4);
X.insert(8);
X.insert(16);

cout << *X.find_by_order(1) << endl; // 2
cout << *X.find_by_order(2) << endl; // 4
cout << *X.find_by_order(4) << endl; // 16
cout << (end(X)==X.find_by_order(6)) << endl; // true

cout << X.order_of_key(-5) << endl;  // 0
cout << X.order_of_key(1) << endl;   // 0
cout << X.order_of_key(3) << endl;   // 2
cout << X.order_of_key(4) << endl;   // 2
cout << X.order_of_key(400) << endl; // 5

------------------------

1.10 Fast input-output

namespace fastio {
	static constexpr int SZ = 1 << 17;
	char inbuf[SZ], outbuf[SZ];
	int in_left = 0, in_right = 0, out_right = 0;
 
	struct Pre {
		char num[40000];
		constexpr Pre() : num() {
			for (int i = 0; i < 10000; i++) {
				int n = i;
				for (int j = 3; j >= 0; j--) {
					num[i * 4 + j] = n % 10 + '0';
					n /= 10;
				}
			}
		}
	} constexpr pre;
 
	inline void load() {
		int len = in_right - in_left;
		memcpy(inbuf, inbuf + in_left, len);
		in_right = len + fread(inbuf + len, 1, SZ - len, stdin);
		in_left = 0;
	}
 
	inline void flush() {
		fwrite(outbuf, 1, out_right, stdout);
		out_right = 0;
	}
 
	inline void skip_space() {
		if (in_left + 32 > in_right)
			load();
		while (inbuf[in_left] <= ' ')
			in_left++;
	}
 
	inline void rd(char& c) {
		if (in_left + 32 > in_right)
			load();
		c = inbuf[in_left++];
	}
	template <typename T>
	inline void rd(T& x) {
		if (in_left + 32 > in_right)
			load();
		char c;
		do
			c = inbuf[in_left++];
		while (c < '-');
		[[maybe_unused]] bool minus = false;
		if constexpr (is_signed<T>::value == true) {
			if (c == '-')
				minus = true, c = inbuf[in_left++];
		}
		x = 0;
		while (c >= '0') {
			x = x * 10 + (c & 15);
			c = inbuf[in_left++];
		}
		if constexpr (is_signed<T>::value == true) {
			if (minus)
				x = -x;
		}
	}
	inline void rd() {}
	template <typename Head, typename... Tail>
	inline void rd(Head& head, Tail&... tail) {
		rd(head);
		rd(tail...);
	}
 
	inline void wt(char c) {
		if (out_right > SZ - 32)
			flush();
		outbuf[out_right++] = c;
	}
	inline void wt(bool b) {
		if (out_right > SZ - 32)
			flush();
		outbuf[out_right++] = b ? '1' : '0';
	}
	template <typename T>
	inline void wt(T x) {
		if (out_right > SZ - 32)
			flush();
		if (!x) {
			outbuf[out_right++] = '0';
			return;
		}
		if constexpr (is_signed<T>::value == true) {
			if (x < 0)
				outbuf[out_right++] = '-', x = -x;
		}
		int i = 12;
		char buf[16];
		while (x >= 10000) {
			memcpy(buf + i, pre.num + (x % 10000) * 4, 4);
			x /= 10000;
			i -= 4;
		}
		if (x < 100) {
			if (x < 10) {
				outbuf[out_right] = '0' + x;
				++out_right;
			} else {
				uint32_t q = (uint32_t(x) * 205) >> 11;
				uint32_t r = uint32_t(x) - q * 10;
				outbuf[out_right] = '0' + q;
				outbuf[out_right + 1] = '0' + r;
				out_right += 2;
			}
		} else {
			if (x < 1000) {
				memcpy(outbuf + out_right, pre.num + (x << 2) + 1, 3);
				out_right += 3;
			} else {
				memcpy(outbuf + out_right, pre.num + (x << 2), 4);
				out_right += 4;
			}
		}
		memcpy(outbuf + out_right, buf + i + 4, 12 - i);
		out_right += 12 - i;
	}
 
	inline void wt() {}
	template <typename Head, typename... Tail>
	inline void wt(Head&& head, Tail&&... tail) {
		wt(head);
		wt(forward<Tail>(tail)...);
	}
 
	template <typename... Args>
	inline void wtn(Args&&... x) {
		wt(forward<Args>(x)...);
		wt('\n');
	}
 
	struct Dummy {
		Dummy() { atexit(flush); }
	} dummy;
}  // namespace fastio

------------------------

1.11 Stress-testing

import os, sys

_, f1, f2, gen, iters = sys.argv
# первый аргумент это название программы, "checker.py",
# поэтому "забудем" его с помощью "_"

for i in range(int(iters)):
	print('Test', i + 1)
	os.system(f'python3 {gen} > test.txt')
	v1 = os.popen(f'./{f1} < test.txt').read()
	v2 = os.popen(f'./{f2} < test.txt').read()
	if v1 != v2:
		print("Failed test:")
		print(open("test.txt").read())
		print(f'Output of {f1}:')
		print(v1)
		print(f'Output of {f2}:')
		print(v2)
		break

------------------------------------------------

2. Graphs

2.1 Finding bridges

const int MAXN = ...;
vector<int> g[MAXN];
bool used[MAXN];
int timer, tin[MAXN], fup[MAXN];
 
void dfs(int v, int p = -1) {
	used[v] = true;
	tin[v] = fup[v] = timer++;
	for (size_t i = 0; i < g[v].size(); ++i) {
		int to = g[v][i];
		if (to == p) continue;
		if (used[to])
			fup[v] = min(fup[v], tin[to]);
		else {
			dfs(to, v);
			fup[v] = min(fup[v], fup[to]);
			if (fup[to] > tin[v])
				IS_BRIDGE(v,to);
		}
	}
}

void find_bridges() {
	timer = 0;
	for (int i = 0; i < n; ++i)
		used[i] = false;
	for (int i = 0; i < n; ++i)
		if (!used[i])
			dfs(i);
}

------------------------

2.2 Finding cutpoints

vector<int> g[MAXN];
bool used[MAXN];
int timer, tin[MAXN], fup[MAXN];
 
void dfs(int v, int p = -1) {
	used[v] = true;
	tin[v] = fup[v] = timer++;
	int children = 0;
	for (size_t i = 0; i < g[v].size(); ++i) {
		int to = g[v][i];
		if (to == p) continue;
		if (used[to])
			fup[v] = min(fup[v], tin[to]);
		else {
			dfs(to, v);
			fup[v] = min(fup[v], fup[to]);
			if (fup[to] >= tin[v] && p != -1)
				IS_CUTPOINT(v);
			++children;
		}
	}
	if (p == -1 && children > 1)
		IS_CUTPOINT(v);
}

int main() {
	int n;
	... чтение n и g ...
 
	timer = 0;
	for (int i = 0; i < n; ++i)
		used[i] = false;
	dfs(0);
}

------------------------

2.3 LCA (sparse table)

const int MAXN = 1e5;
const int LOG = 20;
int euler_size = 0;

vector<int> g[MAXN];
vector<int> euler;
int d[MAXN], first[MAXN];
pair<int,int> sp[LOG][2*MAXN];

void dfs(int v, int p = -1) {
	if (p == -1) {
		d[v] = 0;
		first[v] = euler_size++;
		euler.push_back(v);
	}
	else
		d[v] = d[p] + 1;
	
	for (auto to : g[v]) {
		if (to == p)
			continue;
		first[to] = euler_size++;
		euler.push_back(to);
		dfs(to, v);
		euler.push_back(v); euler_size++;
	}
}

void build_sp() {
	int n = euler.size();
	for (int i = 0; i < n; i++)
		sp[0][i] = {d[euler[i]], euler[i]};
	
	for (int l = 0; l < LOG - 1; l++)
		for (int i = 0; i + (1 << l) < n; i++)
			sp[l+1][i] = min(sp[l][i], sp[l][i + (1 << l)]);
}

int lca(int v, int u) {
	int l = min(first[v], first[u]);
	int r = max(first[v], first[u]) + 1;
	int t = __lg(r - l);
	return min(sp[t][l], sp[t][r - (1 << t)]).second;
}

------------------------

2.4 MST: Prim's algorithm

int n; // number of vertices
vector<vector<pair<int,int>>> g(n);
vector<vector<int>> mst(n); // minimum spanning tree

vector<int> min_e(n, INF), sel(n, -1);

min_e[0] = 0;
set<pair<int,int>> q;
q.insert({0, 0});

while (!q.empty()) {
	int v = q.begin()->second;
	q.erase(q.begin());

	if (sel[v] != -1) {
		mst[v].pb(sel[v]);
		mst[sel[v]].pb(v);
	}

	for (auto [to, w] : g[v]) {
		if (w < min_e[to]) {
			q.erase({min_e[to], to});
			min_e[to] = w;
			sel[to] = v;
			q.insert({min_e[to], to});
		}
	}
}

------------------------

2.5 Kuhn's algorithm

int n, k; // sizes of parts
vector<vector<int>> g;
vector<int> mt;
vector<bool> used;

bool try_kuhn(int v) {
	if (used[v])
		return false;
	used[v] = true;
	for (int to : g[v]) {
		if (mt[to] == -1 || try_kuhn(mt[to])) {
			mt[to] = v;
			return true;
		}
	}
	return false;
}

int main() {
	// ... reading the graph ...

	mt.assign(k, -1);
	vector<bool> used1(n, false);
	for (int v = 0; v < n; ++v) {
		for (int to : g[v]) {
			if (mt[to] == -1) {
				mt[to] = v;
				used1[v] = true;
				break;
			}
		}
	}
	for (int v = 0; v < n; ++v) {
		if (used1[v])
			continue;
		used.assign(n, false);
		try_kuhn(v);
	}

	for (int i = 0; i < k; ++i)
		if (mt[i] != -1)
			printf("%d %d\n", mt[i] + 1, i + 1);
}

------------------------

2.6 Eulerian path

int n; // number of vertices
int m; // number of edges

vector<vector<pair<int,int>> g(n); // edge: {index, to}
vector<int> vis(m, 0);
vector<int> first(n, 0);
vector<int> path;

void euler(int v)
{
	int len = g[v].size();
	while (first[v] < len) {
		auto [i, to] = g[v][first[v]];

		first[v]++;

		if (!vis[i]) {
			vis[i] = 1;
			euler(to);
			path.push_back(to);
		}
	}    
}

int main() {
	// ... reading the graph ...

	int start; // start vertex
	euler(start);

	path.push_back(start);
	reverse(path.begin(), path.end());
}

------------------------

2.7 Floyd-Warshall algorithm 

int n;
int d[n][n];

for (int k = 0; k < n; ++k) {
	for (int i = 0; i < n; ++i) {
		for (int j = 0; j < n; ++j) {
			if (d[i][k] < INF && d[k][j] < INF)
				d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
		}
	}
}

------------------------

2.8 2-SAT

struct TwoSatSolver {
	int n_vars;
	int n_vertices;
	vector<vector<int>> adj, adj_t;
	vector<bool> used;
	vector<int> order, comp;
	vector<bool> assignment;

	TwoSatSolver(int _n_vars) : n_vars(_n_vars), n_vertices(2 * n_vars), adj(n_vertices), adj_t(n_vertices), used(n_vertices), order(), comp(n_vertices, -1), assignment(n_vars) {
		order.reserve(n_vertices);
	}

	void dfs1(int v) {
		used[v] = true;
		for (int u : adj[v]) {
			if (!used[u])
				dfs1(u);
		}
		order.push_back(v);
	}

	void dfs2(int v, int cl) {
		comp[v] = cl;
		for (int u : adj_t[v]) {
			if (comp[u] == -1)
				dfs2(u, cl);
		}
	}

	bool solve_2SAT() {
		order.clear();
		used.assign(n_vertices, false);
		for (int i = 0; i < n_vertices; ++i) {
			if (!used[i])
				dfs1(i);
		}

		comp.assign(n_vertices, -1);
		for (int i = 0, j = 0; i < n_vertices; ++i) {
			int v = order[n_vertices - i - 1];
			if (comp[v] == -1)
				dfs2(v, j++);
		}

		assignment.assign(n_vars, false);
		for (int i = 0; i < n_vertices; i += 2) {
			if (comp[i] == comp[i + 1])
				return false;
			assignment[i / 2] = comp[i] > comp[i + 1];
		}
		return true;
	}

	void add_disjunction(int a, bool na, int b, bool nb) {
		// na and nb signify whether a and b are to be negated 
		a = 2 * a ^ na;
		b = 2 * b ^ nb;
		int neg_a = a ^ 1;
		int neg_b = b ^ 1;
		adj[neg_a].push_back(b);
		adj[neg_b].push_back(a);
		adj_t[b].push_back(neg_a);
		adj_t[a].push_back(neg_b);
	}
};

------------------------------------------------

3. Flows

3.1 Maxflow: Dinic's algorithm

const int MAXN = ...;
const int INF = 1e9 + 9;

struct edge {
	int a, b, cap, flow;
};

int n, s, t, d[MAXN], ptr[MAXN], q[MAXN];
vector<edge> e;
vector<int> g[MAXN];

void add_edge(int a, int b, int cap) {
	edge e1 = { a, b, cap, 0 };
	edge e2 = { b, a, 0, 0 };
	g[a].push_back ((int) e.size());
	e.push_back (e1);
	g[b].push_back ((int) e.size());
	e.push_back (e2);
}

bool bfs() {
	int qh = 0, qt = 0;
	q[qt++] = s;
	memset(d, -1, n * sizeof d[0]);
	d[s] = 0;
	while (qh < qt && d[t] == -1) {
		int v = q[qh++];
		for (size_t i = 0; i < g[v].size(); ++i) {
			int id = g[v][i],
			to = e[id].b;
			if (d[to] == -1 && e[id].flow < e[id].cap) {
				q[qt++] = to;
				d[to] = d[v] + 1;
			}
		}
	}
	return d[t] != -1;
}

int dfs(int v, int flow, int can) {
	if (!flow) return 0;
	if (v == t) return flow;
	for (; ptr[v] < (int)g[v].size(); ++ptr[v]) {
		int id = g[v][ptr[v]],
		to = e[id].b;
		if (d[to] != d[v] + 1 || e[id].cap - e[id].flow < can) continue;
		int pushed = dfs(to, min (flow, e[id].cap - e[id].flow), can);
		if (pushed) {
			e[id].flow += pushed;
			e[id^1].flow -= pushed;
			return pushed;
		}
	}
	return 0;
}

int dinic() {
	int flow = 0;
	while (true) {
		if (!bfs()) break;
		memset(ptr, 0, n * sizeof ptr[0]);
		for (int k = 30; k >= 0; k--) /* just k = 0, if no scaling */ {
			while (int pushed = dfs(s, INF, (1 << k)))
				flow += pushed;
		}
	}
	return flow;
}

------------------------

3.2 Minimal cut

void dfs1(int v) {
	used[v] = true;
	for (int i = 0; i<g[v].size(); i++) {
		int id = g[v][i],
			to = e[id].b;
		if (!used[to] && e[id].flow < e[id].cap)
			dfs1(to);
	}
}

int main(){
	// ..finding max flow..

	dfs1(s);
	for (int i = 0; i < e.size(); i += 2) {
		if (used[e[i].a] && !used[e[i].b]) {
			ans.push_back(make_pair(e[i].a, e[i].b));
			anss += e[i].flow;
		}
	}
}

------------------------

3.3 Mincost flow

void add_edge(int a, int b) { 
	edge e1 = { b, u[a][b], c[a][b], 0, r[b].size() };
	edge e2 = { a, 0, -c[a][b], 0, r[a].size() };
	r[a].push_back(e1);
	r[b].push_back(e2);
}

int main() {  
	// ...
	int flow = 0;
	int cost = 0;
	k = INF;
	while (flow < k) {
		vector<int> id( n+1 , 0);
		vector<int> d(n+1, inf);
		deque <int> q;
		vector<int> p(n+1);
		vector<int> p_e(n+1);
		d[s] = 0;
		q.push_back(s);
		
		while (!q.empty()) {
			int v = q.front();
			q.pop_front();
			id[v] = 2;
			for(int i = 0 ; i < r[v].size(); i++) {
				edge &e = r[v][i];
				if(e.f < e.u && d[v] + e.c < d[e.b]) {
					d[e.b] = d[v] + e.c;
					if(!id[e.b])
						q.push_back(e.b);
					else 
					if(id[e.b] == 2)
						q.push_front(e.b);
				id[e.b] = 1;
				p[e.b] = v;
				p_e[e.b] = i;
				}
			}
		}
		
		if(d[t] == INF)
			break;
		
		int addflow = k - flow;
		for (int v = t; v != s; v = p[v]) {
			int pv = p[v];
			int pr = p_e[v];
			addflow = min(addflow, r[pv][pr].u - r[pv][pr].f);
		}

		for (int v = t; v != s; v = p[v]) {
			int pv = p[v];
			int pr = p_e[v];
			int e = r[pv][pr].back;
			r[pv][pr].f += addflow;
			r[v][e].f -= addflow;
			cost += r[pv][pr].c * addflow;
		}

		flow += addflow;
	}
}

------------------------------------------------

4. Math

4.1 Modulo arithmetics

const ll MOD = 1e9 + 7;

inline ll binpow(const ll a, const ll p)
{
	if(p == 0)
		return 1;
	if(p == 1)
		return a;
 
	ll b = binpow(a, p >> 1);
 
	if(p & 1)
		return b * b % MOD * a % MOD;
	else
		return b * b % MOD;
}
 
inline ll inv(const ll num)
{
	return binpow(num, MOD-2);
}

------------------------

4.2 Euler's function

int phi(int n) {
	int result = n;
	for (int i = 2; i * i <= n; ++i)
	if (n % i == 0) {
		while (n % i == 0)
			n /= i;
		result -= result / i;
	}
	if (n > 1)
		result -= result / n;
	return result;
}

------------------------

4.3 FFT (modulo/complex)

#include <bits/stdc++.h>
// Modulo
using namespace std;

#define int long long
#define all(x) x.begin(), x.end()

template<typename T>
ostream& operator << (ostream& out, const vector<T>& a){
	for (const auto& e : a){
		out << e << ' ';
	}
	return out;
}

const int mod = 998244353;

int fpow(int a, int p){
	if (p == 0){
		return 1;
	}
	if (p & 1){
		return fpow(a, p - 1) * a % mod;
	}
	return fpow(a*a % mod, p >> 1);
}

vector<int> roots;

vector<int> operator * (vector<int> a, vector<int> b){

	int sz = 1;
	while ((1 << sz) < (int)a.size() + (int)b.size()){
		sz++;
	}

	int SZ = 1 << sz;

	vector<int> rev(SZ);
	for (int i = 0; i < SZ; i++){
		int j = 0;
		for (int b = 0; b < sz; b++){
			j <<= 1;
			j |= (i >> b) & 1;
		}
		rev[i] = j;
	}

	auto fft = [&](vector<int>& a, int br){
		for (int i = 0; i < SZ; i++){
			if (rev[i] < i){
				swap(a[rev[i]], a[i]);
			}
		}

		for (int j = 1; j <= sz; j++){
			int root = fpow(br, 1 << (sz - j));
			int sj = 1 << j;
			int ssj = sj >> 1;
			int x = 1;
			for (int k = 0; k < ssj; k++){
				for (int i = 0; i < SZ; i += sj){
					int z0 = a[i + k];
					int z1 = x * a[i + k + ssj] % mod;
					a[i + k] = z0 + z1;
					if (a[i + k] > mod){
						a[i + k] -= mod;
					}
					a[i + k + ssj] = z0 - z1;
					if (a[i + k + ssj] < 0){
						a[i + k + ssj] += mod;
					}
				}
				x = x * root % mod;
			}
		}
	};

	a.resize(SZ);
	b.resize(SZ);

	fft(a, roots[sz]);
	fft(b, roots[sz]);

	vector<int> c(SZ);
	for (int i = 0; i < SZ; i++){
		c[i] = a[i] * b[i] % mod;
	}

	fft(c, fpow(roots[sz], mod - 2));
	int rn = fpow(SZ, mod - 2);
	for (auto& e : c){
		e = (e * rn) % mod;
	}

	while (c.size() > 1 && c.back() == 0){
		c.pop_back();
	}
	return c;
}

vector<int> inverse(const vector<int>& p, vector<int> q, int sz){
	if (sz >= (int)p.size()){
		return q;
	}

	vector<int> p_;
	for (int i = 0; i < 2*sz && i < (int)p.size(); i++){
		p_.push_back(p[i]);
	}

	p_ = p_ * q;
	p_.resize(2*sz);
	for (auto& e : p_){
		e = mod - e;
	}
	p_[0] = (p_[0] + 1) % mod;

	p_ = p_ * q;
	p_.resize(2*sz);
	for (int i = 0; i < (int)q.size(); i++){
		p_[i] = q[i];
	}

	return inverse(p, p_, sz << 1);
}

void init_roots(){
	int mx_sz = 21;
	int j = 1;
	for (; j < mod; j++){
		if (fpow(j, 1 << (mx_sz - 1)) == (mod - 1)){
			break;
		}
	}
	if (j == mod){
		cout << "very big size palinom. not found root!";
		exit(0);
	}

	for (int i = mx_sz; i >= 0; i--) {
		roots.push_back(j);
		j = j * j % mod;
	}

	reverse(all(roots));
}

signed main() {
	init_roots();
	vector<int> a = {1, 1, 1};
	cout << a * a << endl;
	cout << a * inverse(a, {fpow(a[0], mod - 2)}, 1) << endl;
}

// Complex
vector<int> operator * (const vector<int>& a, const vector<int>& b){
	int SZ = 1;
	while (SZ < (int)a.size() + (int)b.size() - 1){
		SZ <<= 1;
	}
	vector<int> rv(SZ);
	for (int i = 1, j = 0; i < SZ; i++){
		int b = SZ >> 1;
		for (; b <= j; b >>= 1){
			j -= b;
		}
		rv[i] = j += b;
	}
	double ang = 2 * acosl(-1) / SZ;
	base root(cos(ang), sin(ang));
 
	auto fft = [&](vector<base>& a, base br){
		for (int i = 0; i < SZ; i++){
			if (rv[i] < i){
				swap(a[i], a[rv[i]]);
			}
		}
 
		for (int j = 2; j <= SZ; j <<= 1){
			base root = br;
			for (int i = j; i < SZ; i <<= 1){
				root *= root;
			}
			int lj = j >> 1;
			vector<base> rt(lj);
			rt[0] = 1;
			for (int i = 1; i < lj; i++){
				rt[i] = rt[i - 1] * root;
			}
 
			for (int i = 0; i < SZ; i += j){
				base z;
				auto il = a.begin() + i;
				auto ir = il + lj;
				auto en = ir;
				auto it = rt.begin();
				for (; il != en; il++, ir++, it++){
					z = *ir * *it;
					*ir = *il - z;
					*il += z;
				}
			}
		}
	};
 
	vector<base> A(SZ);
	for (int i = 0; i < a.size(); i++){
		A[i] = a[i];
	}
	fft(A, root);
 
	vector<base> B(SZ);
	for (int i = 0; i < b.size(); i++){
		B[i] = b[i];
	}
	fft(B, root);
 
	for (int i = 0; i < SZ; i++){
		A[i] *= B[i];
	}
	fft(A, base(1) / root);
 
	vector<int> c(a.size() + b.size() - 1);
	for (int i = 0; i < c.size(); i++){
		c[i] = (int)round(A[i].real() / SZ) % mod;
	}
 
	return c;
}

------------------------

4.4 Linear Sieve

const int N = 10000000;
vector<int> lp(N+1);
vector<int> pr;

for (int i = 2; i <= N; ++i) {
	if (lp[i] == 0) {
		lp[i] = i;
		pr.push_back(i);
	}
	for (int j = 0; i * pr[j] <= N; ++j) {
		lp[i * pr[j]] = pr[j];
		if (pr[j] == lp[i]) {
			break;
		}
	}
}

------------------------

4.5 Game theory

Если A - игра на ациклическом графе, то A ~ ∗i для некоторого числа i.
Будем обозначать число i, такое что A ~ ∗i, как g(A).
Если из игры A существуют ходы в игры A1, A2, ... , An, то
g(A) = mex{g(A1), g(A2), ... , g(An)}

Сумма игр: ∗i + ∗j ~ ∗(i ^ j).

------------------------

4.6 Diofant

a * x + b * y = c

! a = b = 0 - special case

int gcd (int a, int b, int & x, int & y) {
	if (a == 0) {
		x = 0; y = 1;
		return b;
	}
	int x1, y1;
	int d = gcd (b%a, a, x1, y1);
	x = y1 - (b / a) * x1;
	y = x1;
	return d;
}
 
bool find_any_solution (int a, int b, int c, int & x0, int & y0, int & g) {
	g = gcd (abs(a), abs(b), x0, y0);
	if (c % g != 0)
		return false;
	x0 *= c / g;
	y0 *= c / g;
	if (a < 0)   x0 *= -1;
	if (b < 0)   y0 *= -1;
	return true;
}

void find_next_solution(int a, int b, int x0, int y0, int g, int& x, int& y)
{
	x = x0 + b / g;
	y = y0 - a / g;
}

-----------------------

4.7 Burnside lemma

Необходимо посчитать количество классов эквивалентности

Есть группа G (операции, действия), действующая на множество X (элементы).

Неподвижная точка для g - такое x что: g * x = x
Множество неподвижных точек для g - I(g)

Два элемента x и y эквивалентны, если x = gy для некоторого g

Лемма Бернсайда:
Количество классов эквивалентности = (1 / |G|) * sum_{g in G} I(g)

Теорема Пойя:

I(g) = k ^ C(g)
k - множество значений элемента
C(g) - количество циклов в перестановке

Количество классов эквивалентности = (1 / |G|) * sum_{g in G} k ^ C(g)

Пример: ожерелья
Есть ожерелье длины n, каждая бусинка имеет один из m цветов. Ожерелья одинаковые, если одно можно получить из другого, циклически сдвинув другое.

В данном случае G = перестановка 1, 2, ..., n ; сдвинутая на все i влево
Их n

Тогда C(g) = gcd(n, i) - количество циклов в перестановке со сдвигом i

Решение:

n - длина, m - цвета

ll ans = 0;

for(int i = 0; i < n; i++)
	ans = (ans + binpow(m, gcd(n, i))) % MOD;
 
cout << ans * inv(n) % MOD;

-----------------------------

4.8 Catalan numbers

1, 1, 2, 5, 14, 42, 132...

C_n = 1 / (n + 1) * C^n_{2n}

n-th Catalan number is:
	number of binary trees with n+1 unnumbered leaves
	number of triangulations of convex n+2 polygon
	number of connections 2n points on a circle with non-intersected chords
	number of non-isomorphic full binary trees with n vertices interior (that have at least one son)
	number of permutations of length n, which can be sorted by stack (not such indexes: i < j < k and a_k < a_i < a_j)
	number of continuous partitions of set of n elements
	number of covering n-ladder with n rectangles

-----------------------------

4.9 Stirling numbers

I. Number of permutations length n with k cycles

| s[n,k] | = | s[n-1,k-1] | + (n - 1) * | s[n-1,k] |
s[n,1] = s[n,n] = 1

II. The number of ways to partition a set of n objects into k non-empty subsets.

| S[n,k] | = | S[n-1,k-1] | + k * | S[n-1,k] |

S[n,k] = 1 / k! * sum(j=0..k, (-1)^(k-j) * C[k,j] * j^n)

-----------------------------

4.10 Formulas++

Количество остовных деревьев в полном графе: n^(n - 2)
Перебор подмасок: s = (s - 1) & m
Код Грея: n ^ (n >> 1)

Пусть p - простое число. Тогда (p - 1)! ≡ -1 mod p

The radius of circumscribed circle of triangle
R = a * b * c / (4 * S)

The radius of circumscribed circle of regular polygon
R = a / (2 * sin(180 / n))

The radius of inscribed circle of triangle
R = S / p, p - half-perimeter

Geometric progression:
b_n = b_1 * q^(n-1)
S_n = b_1 * (1 - q^n) / (1 - q) -- if q != 1
S = b_1 / (1 - q) -- if |q| < 1

Pick's formula:
S = interior + boundary / 2 - 1

Binomial coefficients:
C[k,n] = C[k-1,n-1] + C[k,n-1]
C[k,n] = n / k * C[k-1,n-1]
C[0,n]^2 + C[1,n]^2 + ... + C[n,n]^2 = C[n,2n]
1*C[1,n] + 2*C[2,n] + ... + n*C[n,n] = n * 2^(n-1)
C[0,n] + C[1,n-1] + ... + C[n,0] = F[n+1]

Bell numbers:
B[n+1] = sum(k=0..n, C[n,k] * B[k]) = sum(k=1..n, S[n,k])

Sums of the series:
sum(k=0..n, k^2) = n * (n + 1) * (2n + 1) / 6
sum(k=0..n, k^3) = (n * (n + 1))^2 / 4

-----------------------------

4.11 Pythagorean triples

Примитивные тройки:
a = m^2-n^2
b = 2mn
c = m^2+n^2

Все тройки:
a = k * (m^2-n^2)
b = k * 2mn
c = k * (m^2+n^2)

m, n, k - натуральные числа
m > n
m - n - нечётно
gcd(m, n) = 1

-----------------------------

4.12 Fibonacci numbers

gcd(F_n, F_n+1) = 1
gcd(F_n, F_m) = F_gcd(n, m)
F_nk делится на F_n

	     ( 0 1 ) ^ n 
(F_0, F_1) * ( 1 1 )      = (F_n, F_n+1)

--------------------------------------------

5. Data Structures

5.1 DSU

struct DSU {
	vector<int> p, r;
	
	void build(int n) {
		p = vector<int> (n, 0);
		r = vector<int> (n, 0);
		for (int i = 0; i < n; i++)
			p[i] = i;
	}

	int get(int a) {
		return p[a] = (p[a] == a ? a : get(p[a]));
	}

	void unite(int a, int b) {
		a = get(a);
		b = get(b);
		if (r[a] == r[b])
			r[a]++;
		if (r[a] > r[b])
			p[b] = a;
		else
			p[a] = b;
	}
};

------------------------

5.2 Fenwick tree

// прибавление в элементе
void add(int pos, int x) {
	for (++pos; pos <= n; pos += pos & (-pos)) {
		tF[pos] += x;
	}
}

// сумма на префиксе до r включительно
int sumpref(int r) {
	int sum = 0;
	for (++r; r > 0; r -= r & (-r)) {
		sum += tF[r];
	}
	return sum;
}

// поиск префикса, на котором сумма больше либо равна sum
int binsearch(int sum) {
	int mask = 0;
	for (int k = log[n]; k >= 0; --k) {
		if (mask + (1 << k) <= n && tF[mask + (1 << k)] < sum) {
			sum -= tF[mask + (1 << k)];
			mask += (1 << k);
		}
	}
	return mask;
}

// изменение на отрезке, значение элемента
void query_add() {
	int l, r, x;
	cin >> l >> r >> x;
	--l; --r;
	add(l, x);
	add(r + 1, -x);
}

void solve() {
	cin >> n;
	vector <int> a(n);
	for (int i = 0; i < n; ++i) {
		cin >> a[i];
	}
	vector <int> da(n);
	da[0] = a[0];
	for (int i = 1; i < n; ++i) {
		da[i] = a[i] - a[i - 1];
	}
 
	tF.resize(n + 1);
	for (int i = 0; i < n; ++i) {
		add(i, da[i]);
	}
}

------------------------

5.3 2D Fenwick tree

int t[MAXN][MAXN], a[MAXN][MAXN];
void add(int x, int y, int d) {
	for(int i = x; i <= n; i += i & -i)
		for(int j = y; j <= n; j += j & -j)
			t[i][j] += d;
}

int sum(int x, int y) {
	int res = 0;
	for(int i = x; i > 0; i -= i & -i)
		for(int j = y; j > 0; j -= j & -j)
			res += t[i][j];
	return res;
}

int sum(int x, int y, int X, int Y) {
	return sum(X, Y) - sum(x, Y) - sum(X, y) + sum(x, y)
}

------------------------

5.4 Segment tree

const int SZ = 1 << 18;

struct SegTree {
	int t[SZ << 1], p[SZ << 1];

	void build(vector<int> &a) {
		int n = (int)a.size();

		fill(t, t + (SZ << 1), 0);
		fill(p, p + (SZ << 1), 0);

		for(int i = 0; i < n; i++)
			t[i | SZ] = a[i];
	
		for(int i = SZ - 1; i > 0; i--)
			t[i] = t[i << 1] + t[i << 1 | 1];
	}

	void push(int v, int len) {
		p[v << 1] += p[v];
		p[v << 1 | 1] += p[v];
		
		t[v << 1] += p[v] * len >> 1;
		t[v << 1 | 1] += p[v] * len >> 1;
		
		p[v] = 0;
	}

	void update(int ql, int qr, int d, int l = 0, int r = SZ, int v = 1) {
		if(qr <= l || r <= ql)
			return;

		if(ql <= l && r <= qr){
			t[v] += d * (r - l);
			p[v] += d;
			return;
		}

		push(v, r - l);

		int m = (l + r) >> 1;
		update(ql, qr, d, l, m, v << 1);
		update(ql, qr, d, m, r, v << 1 | 1); 
		t[v] = t[v << 1] + t[v << 1 | 1];
	}

	int get(int ql, int qr, int l = 0, int r = SZ, int v = 1) {
		if(qr <= l || r <= ql)
			return 0;

		if(ql <= l && r <= qr)
			return t[v];

		push(v, r - l);

		int m = (l + r) >> 1;
		return get(ql, qr, l, m, v << 1) + get(ql, qr, m, r, v << 1 | 1);
	}
};

------------------------------------------------

6. Geometry

6.0 Geometry functions

hypot(x, y) => Евклидово расстояние до точки (x, y) (высокая точность!)

atan2(y, x) => arctan(y / x) в [-pi, pi]

----------------------------

6.1 Convex hull

struct Point { ll x, y; };

istream& operator >> (istream &in, Point &p) {
	in >> p.x >> p.y;
	return in;
}

Point operator - (const Point &a, const Point &b) {
	return {a.x - b.x, a.y - b.y};
}

ll cross_product(const Point &a, const Point &b) {
	return a.x * b.y - a.y * b.x;
}

bool operator < (const Point &p, const Point &q) {
	return p.x < q.x || (p.x == q.x && p.y < q.y);
}

vector<Point> convex_hull(vector<Point> &a) {
	vector<Point> up, dw; 
	sort(a.begin(), a.end());
	
	for(auto p : a){
		while(up.size() > 1 && cross_product(p - up.back(), up.back() - up[up.size() - 2]) >= 0)
			up.pop_back();
		up.push_back(p);
 
		while(dw.size() > 1 && cross_product(p - dw.back(), dw.back() - dw[dw.size() - 2]) <= 0)
			dw.pop_back();
		dw.push_back(p);
	}
	dw.pop_back();
	reverse(dw.begin(), dw.end());
	dw.pop_back();
	up.insert(up.end(), dw.begin(), dw.end());
 
	return up;
}

------------------------

6.2 Geometry template

#include <bits/stdc++.h>
using namespace std;

const double eps = 1e-7;
double pi = acos(-1);

struct Line{
	double a, b, c;
	Point v;
	Line (double A, double B, double C) : a(A), b(B), c(C) {
		double len = Point(a, b).len;
		a /= len; b /= len; c /= len;

		if (a < 0 || a == 0 && b < 0){
			a *= -1; b *= -1; c *= -1;
		}

		v = Point(-b, a);
	}

	Line (const Point& p, const Point& q){
		a = p.y - q.y;
		b = q.x - p.x;
		c = -(p.x*a + p.y*b);
		*this = Line(a, b, c);
	}

	Line (){}

	double distance(const Point& p) const {
		return abs(a*p.x + b*p.y + c);
	}

	double vect(const Point& p) const {
		return a*p.x + b*p.y + c;
	}
};

pair<int, Point> intersect(const Line& l, const Line& m){
	double z = l.a * m.b - l.b * m.a;
	if (z == 0){
		if (l.c == m.c){
			return {1, Point()};
		}
		return {-1, Point()};
	}

	double x = -(l.c * m.b - l.b * m.c) / z;
	double y = -(l.a * m.c - l.c * m.a) / z;
	return {0, Point(x, y)};
}

struct Beam {
	Line l;
	Point v;
	Point b;
	Beam (const Point& p, const Point& q) : b(p), v(q), l(p, q){}
	Beam (){}

	double distance(const Point& p) const {
		if (scal(v - b, p - b) < 0){
			return sqrt(dst_2(b, p));
		}
		return l.distance(p);
	}

	bool in_sector(const Point& p) const {
		return scal(v - b, p - b) > -eps;
	}
};

double distance(const Beam& a, const Beam& b){
	const auto& res = intersect(a.l, b.l);
	if (res.first == 0){
		const Point& p = res.second;
		// cout << p << endl;
		if (a.in_sector(p) && b.in_sector(p)){
			return 0;
		}
	}

	return min(a.distance(b.b), b.distance(a.b));
}

struct Segment {
	Point p, q;
	Beam b1, b2;
	Line l;
	Segment (Point p, Point q) : p(min(p, q)), q(max(p, q)), b1(p, q), b2(q, p), l(p, q) {}
	Segment () {}
	
	double distance(const Point& p) const {
		return max(b1.distance(p), b2.distance(p));
	}

	bool in_sector(const Point& p) const {
		return b1.in_sector(p) && b2.in_sector(p);
	}
};

double distance(const Segment& s, const Segment& t){
	const auto& res = intersect(s.l, t.l);
	if (res.first == 0){
		const Point& p = res.second;
		if (s.in_sector(p) && t.in_sector(p)){
			return 0;
		}
	}

	return min(
		min(s.distance(t.p), s.distance(t.q)),
		min(t.distance(s.p), t.distance(s.q))
	);
}

struct Circle {
	Point c;
	double r;
	double rr;

	Circle () {}
	Circle (const Point& C, double R) : c(C), r(R), rr(R * R) {}

	double distance_center_2(const Point& p){
		return distance_2(c, p);
	}

	int point_position(const Point& p){
		double d = distance_center_2(p);
		if (d < rr - eps){
			return 1;
		}
		if (d < rr + eps){
			return 0;
		}
		return -1;
	}

	pair<int, pair<Point, Point>> tangent(const Point& p){
		if (point_position(p) == 1){
			return {0, {Point(), Point()}};
		}

		if (point_position(p) == 0){
			return {1, {Point(), Point()}};
		}

		double cq = r;
		double cp = distance(c, p);
		double pq = sqrt(cp*cp - cq*cq);

		double sp = pq * pq / cp;
		double sq = cq * pq / cp;

		Point SP = (c - p) * (sp / cp);
		Point SQ = SP.rotate(pi / 2) * (sq / SP.len);

		return {2, {SP, SQ}};
	}
};

void solve(){

	Point p, o;
	double r;
	cin >> o >> r >> p;

	Circle c(o, r);

	auto res = c.tangent(p);

	cout << res.first << '\n';

	if (res.first == 0){
		return;
	}

	if (res.first == 1){
		cout << p;
		return;
	}

	const Point& v = res.second.first;
	const Point& u = res.second.second;

	cout << p + v << '\n';

	cout << v.len << ' ' << u.len << '\n';

	cout << p + v + u.rotate(pi) << '\n' << p + v + u;
}

------------------------------------------------

7. Strings

7.1 String hashing

struct num {
	static const int MA = 1e9 + 7, MB = 1e9 + 9;
	int a, b;

	num() { }
	num( int x ) : a(x), b(x) { }
	num( int aa, int bb ) : a(aa), b(bb) { }

	num operator + ( const num &x ) const { return num((a + x.a) % MA, (b + x.b) % MB); }
	num operator - ( const num &x ) const { return num((a + MA - x.a) % MA, (b + MB - x.b) % MB); }
	num operator * ( int x ) const { return num(((ll)a * x) % MA, ((ll)b * x) % MB); }
	num operator * ( const num &x ) const { return num(((ll)a * x.a) % MA, ((ll)b * x.b) % MB); }
	bool operator == ( const num &x ) const { return a == x.a && b == x.b; }

	explicit operator ll () const { return (ll)a * MB + b + 1; } // > 0
};

/* Usage:
	StrComparator<num> h1(n, s);
	h1.substr(i, len);
*/
template <class hash_t>
struct StrComparator {
	static const int P;
	static vector<hash_t> deg;

	int n;
	string s;
	hash_t *h;

	StrComparator( int nn, string ss ) : n(nn), s(ss) {
		h = new hash_t[n + 1];
		h[0] = 0;
		for(int i = 0; i < n; i++)
			h[i + 1] = h[i] * P + s[i];
		deg.reserve(n);
		while (sz(deg) <= n)
			deg.push_back(*deg.rbegin() * P);
	}

	hash_t substr( int i, int len ) const { return h[i + len] - h[i] * deg[len]; }
};
template <class hash_t> vector <hash_t> StrComparator<hash_t>::deg(1, hash_t(1));
template <class hash_t> const int StrComparator<hash_t>::P = max(239, rand());

------------------------

7.2 Z-function

vector<int> z_function(string s) {
	int n = s.size();
	vector<int> z(n);
	int l = 0, r = 0;
	for(int i = 1; i < n; i++) {
		if(i < r)
			z[i] = min(r - i, z[i - l]);
		while(i + z[i] < n && s[z[i]] == s[i + z[i]])
			z[i]++;
		if(i + z[i] > r)
			l = i, r = i + z[i];
	}
	return z;
}

------------------------

7.3 Prefix function

vector<int> prefix_function(string s) {
	int n = (int)s.length();
	vector<int> pi(n);
	for (int i = 1; i < n; i++) {
		int j = pi[i-1];
		while (j > 0 && s[i] != s[j])
			j = pi[j-1];
		if (s[i] == s[j])
			j++;
		pi[i] = j;
	}
	return pi;
}

------------------------

7.4 Trie

const int k = 26;
struct Trie{
	struct Node{
		Node* to[k] = {0};
		bool terminal = false;
	};

	Node* root;

	void init(){
		root = new Node();
	}

	void add(string& s) {
		Node* v = root;
		for (char c : s) {
			c -= 'a';
			if (!v->to[c])
				v->to[c] = new Node();
			v = v->to[c];
		}
		v->terminal = true;
	}

	void erase(string& s) {
		Node* v = root;
		int fl = 1;
		for (char c : s) {
			c -= 'a';
			if (!v->to[c]) {
				fl = 0;
				break;
			}
			v = v->to[c];
		}
		if(fl) v->terminal = false;
	}

	void build(vector<string>& a){
		init();
		for(auto &s : a)
			add(s);
	}

	Trie(vector<string>& a){
		build(a);
	}
};
